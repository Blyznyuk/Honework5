
# –ó–∞–¥–∞–Ω–∏–µ 1 (–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤)
# –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º (–∞ —á—Ç–æ-—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º) –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:
# 1) Person (–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞: 1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π (–æ–¥–Ω–æ –ø–æ–ª–µ, –º—ã –æ–∂–∏–¥–∞–µ–º - —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞ –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª), –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç—É, 2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
# 1.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
# 2.	–≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
# 3.	–≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ/–µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (obj.age_in(year)); –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ 2019, –Ω–æ –±–æ–ª—å—à–µ 1900, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
# 2) Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ üòä
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
# 1.	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç, Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç, Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç.
# –¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>. –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä —É –≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äúprogrammer‚Äù —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
# 2.	–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.
# 3) ITEmployee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Employee)
# 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skill (—Å–º. –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).
# 2. * –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ skills (—Å–ø–∏—Å–æ–∫) –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º add_skills.
# –¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω –∏ –æ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞—Å—à–∏—Ä—è–µ—Ç–µ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill, –∏–ª–∏ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏ –≤—Å–µ –∏—Ö –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≤ —Å–ø–∏—Å–æ–∫-—Å–≤–æ–π—Å—Ç–≤–æ skill

from datetime import datetime


class Person:
    def __init__(self, full_name, birthday_age):
        full_name.strip()
        # assert full_name.count(' ') !=1, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!!'
        assert int(birthday_age) in range(1900, 2019), '–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥!!!'
        self.full_name = full_name
        self.age = int(birthday_age)

    def name(self):
        a = self.full_name.split()[0]
        return print("–ò–º—è: ", a)

    def familiya(self):
        b = self.full_name.split()[1]
        return print("–§–∞–º–∏–ª–∏—è: ", b)

    def age_in(self, age_in):
        if not age_in:
            b = datetime.now().year - self.age
        else:
            b = self.age - int(age_in)
        return print("Vozrast", abs(b))

########################################################################################################################
class Employee(Person):
    def __init__(self, full_name, birthday_age, position, work_experience, salary=1000):

        super().__init__(full_name, birthday_age)
        self.position = position
        self.work_experience = int(work_experience)
        assert self.work_experience > 0, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!!'
        self.salary = int(salary)

    def position1(self) -> str:
        if self.work_experience < 3:
            return "Junior" + ' ' + self.position
        if 3 <= self.work_experience < 6:
            return "Middle" + ' ' + self.position
        if self.work_experience >= 6:
            return "Senior" + ' ' + self.position

    def zepeshka(self, povushenie):
        zp = self.salary + povushenie
        return zp
########################################################################################################################
class ITEmployee(Employee):
    def __init__(self, full_name, birthday_age, position, work_experience, *args, **kwargs):
        super.__init__(*args, **kwargs)
        super().__init__(full_name, birthday_age, position, work_experience)
        self.skills = []

    def add_skills(self, *args):
        for i in args:
            self.skills.append(i)

full_name = input("–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: ")
birthday_age = input("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ")

p = Person(full_name, birthday_age)
p.name()
p.familiya()
p.age_in(input("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: "))


d = Employee(full_name, birthday_age, input("Position"), input("Age Prof"))
print(d.position1())
print(d.zepeshka(int(input("Povusit zp na: "))))

c = ITEmployee
d = ["Auto", "QC"]
c.add_skills(*d)






